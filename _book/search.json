[
  {
    "objectID": "note3.html",
    "href": "note3.html",
    "title": "3  The distribution of quadratic forms (More on degree of freedom)",
    "section": "",
    "text": "This can be derived from (Cochran 1934)\n\nThe number \\(n-p\\) is the rank of form Q, i.e. the smallest number of independent variables on which the form may be brought by a non-singular linear transformation. In statistical applications, this number of free variables entering into a problem is usually, in accordance with the terminology introduced by R.A. Fisher, denoted as the number of degree of freedom of the problem, or of the distribution of the random variables attached to the problem.\n\n\nTheorem 3.1 (Cochran’s theorem) Let \\(X_1, \\cdots, X_N\\) be i.i.d. standard normal, and\n\\[\\mathbf{X}=\\left[\\begin{array}{c}X_1\\\\ \\vdots\\\\X_N\\\\ \\end{array}\\right],\\]\na random vector of random variables.\nLet \\(B^{(1)}, B^{(2)},\\cdots,B^{(k)}\\) be symmetric matrices with rank \\(r_i\\). Then,\n\\[Q_i=U^TB^{(i)}U \\] so that the \\(Q_i\\) are quadratic forms. Further assume\n\\[\\sum_i Q_i= U^TU\\]\nThen, the following are equivalent:\n\n\\(r_1+\\cdots +r_k =N\\)\n\\(Q_i\\) are independent\n\n\nDenote \\(Y \\sim N(\\bf{0}, \\sigma^2 I_n)\\) is\n\nLemma\n\n\nref to zhihu\n\n\n\n\n\nCochran, W. G. 1934. “The Distribution of Quadratic Forms in a Normal System, with Applications to the Analysis of Covariance.” Mathematical Proceedings of the Cambridge Philosophical Society 30 (2): 178–91. https://doi.org/10.1017/S0305004100016595.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>The distribution of quadratic forms (More on degree of freedom)</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Cochran, W. G. 1934. “The Distribution of Quadratic Forms in a\nNormal System, with Applications to the Analysis of Covariance.”\nMathematical Proceedings of the Cambridge Philosophical Society\n30 (2): 178–91. https://doi.org/10.1017/S0305004100016595.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "note1.html#convergence-and-statistics",
    "href": "note1.html#convergence-and-statistics",
    "title": "1  Review on Basic Probabilities, Sampling Distribution and Normal related Distributions",
    "section": "",
    "text": "1.1.1 Expectation\n\nExpectation for Discrete Random Variable: \\[\nE(X)=\\sum x_i f(x_i)\n\\]\n\n\nExpectation for Continuous Random Variable: \\[\nE(X)=\\int x f(x) dx\n\\]\n\n\n\n1.1.2 Types of Convergence\nIn this section, we will develop the theoretical background to study the convergence of a sequence of random variables in more detail. In particular, we will define different types of convergence. When we say that the sequence \\(X_n\\) converges to \\(X\\), it means that \\(X_n\\) ‘s are getting’‘closer and closer’’ to \\(X\\). Different types of convergence refer to different ways of defining what ‘’closer’’ means. We also discuss how different types of convergence are related.\n\n1.1.2.1 Convergence of Sequence\n\nConvergence of Sequence: A sequence \\(a_1,a_2,a_3, \\cdots, a_n\\) converges to a limit \\(L\\) if \\[\n\\lim_{n\\rightarrow \\infty} a_n=L\n\\] That is, for any \\(\\epsilon&gt;0\\), there exists an \\(N\\in \\mathbb{N}\\) such that \\[\n|a_n-L|&lt;\\epsilon, \\quad \\text{ for all } n&gt; N\n\\]\n\n\n\n1.1.2.2 Convergence in Distribution\nConvergence in distribution is in some sense the weakest type of convergence. All it says is that the CDF of \\(X_n\\)’’s converges to the CDF of \\(X\\) as \\(n\\) goes to infinity. It does not require any dependence between the \\(X_n\\)’s and \\(X\\).\n\nConvergence in Distribution: A sequence of random variables \\(X_1,X_2,X_3,\\cdots, X_n,\\cdots\\) convergences in distribution to a random variable \\(X\\), shown by\n\\[\nX_n \\ \\xrightarrow{d}\\ X\n\\] if \\[\n\\lim_{n\\rightarrow \\infty} F_{X_n}(x)=F_X(x)\n\\] for all x at which \\(F_X(x)\\) is continuous.\n\nThe Central Limit Theorem (CLT) is an example of the convergence in distribution.\n\n\n1.1.2.3 Convergence in Probability\n\nConvergence in Probability: A sequence of random variables \\(X_1,X_2,X_3,\\cdots, X_n,\\cdots\\) convergences in probability to a random variable \\(X\\), shown by\n\\[\nX_n\\xrightarrow{P}X\n\\] if \\[\n\\lim_{n \\rightarrow \\infty}P(|X_n-X|\\geq \\epsilon)=0, \\quad \\text{for all } \\epsilon &gt;0\n\\]\n\n\n\n1.1.2.4 Convergence in Mean\n\nConvergence in Mean:\nLet \\(r\\geq 1\\) be a fixed number, a sequence of random variables \\(X_1,X_2,\\cdots\\) converges in the \\(r\\)-th mean or in the \\(L^r\\) norm to a random variable \\(X\\), shown by \\(X_n \\xrightarrow{L^r} X\\), if \\[\n\\lim_{n \\rightarrow \\infty} E(|X_n-X|^r)=0.\n\\] If \\(r=2\\), it is called the mean-square convergence, and it is shown by \\[\nX_n\\xrightarrow{m.s.}X.\n\\]\n\n\n\n1.1.2.5 Convergence Almost Surely\n\nIn general, if the probability that the sequence \\(X_n(s)\\) converges to \\(X(s)\\) is equal to \\(1\\), we say that \\(X_n\\) converges to \\(X\\) almost surely and write \\[\nX_n \\xrightarrow{a.s.} X\n\\] if \\[\nP\\left(\\left\\{s\\in S: \\lim_{n\\rightarrow \\infty}X_n(s)=X(s)\\right\\}\\right)=1\n\\]\n\nIt worth mentioning that, the concepts of convergence in probability and almost sure convergence in probability theory are specialisations of the concepts of convergence in measure and pointwise convergence almost everywhere in measure theory.\n\n\n\n1.1.3 Basic Probability Theory\n\n1.1.3.1 \\(\\sigma\\)-algrbra, algebra and semi-ring\n\nDefinition: algebra, \\(\\sigma\\)-algrbra, semi-ring\n\nFAQ: Example of an algebra not a \\(\\sigma\\)-algebra\nNot required, just as an introduction. If you are very intersted in probability theory, it is a recommendation to find out why we need these definitions.\n\n\n\n1.1.4 Sequence of Random Variables\nIn statistics, we draw a sample to make inference of the population, then, if we repeatly draw samples, we will have a sequence of samples from the same population, we usually refer them as i.i.d. (independent and identical distributed) or random samples. This can be denoted as\n\\[\n\\{\\Omega,\\Sigma,P\\}\n\\] where \\(\\Omega\\) is the sample space,\n\\[\n\\Omega=\\{\\omega_1,\\omega_2,\\cdots, \\omega_n\\}, \\quad w_i \\text{ are simple(single) events}\n\\]\n\\(\\Sigma\\) is the \\(\\sigma\\)-algebra (You may consider it is set of the sets of simple events in brief) and \\(P\\) is a probability measure.\nHowever, if we consider the samples not necessarily from the same population, we may have a sequence of random variables \\(X_1,X_2,\\cdots\\), and an correspnded underlying sample space \\(\\Omega\\). In particular, each \\(X_n\\) is a function from its \\(\\Omega\\), to real numbers through the probability measure \\(P\\).\nIn other words, a sequence of random variables is in fact a sequence of functions (Mapping, or \\(P\\), or a probability measure) \\(X_n:\\Omega\\rightarrow \\mathbb{R}\\) , such as\n\\[\nP(\\omega_i)=x_i, \\quad \\omega_i \\in \\Omega \\text{ and } \\sum x_i=1, \\quad i = 1,\\cdots,n\n\\]\n\n1.1.4.0.0.1 Example: Convergence of Sequence of R.V.\nConsider the following random experiment: A fair coin is tossed once. Here, the sample space has only two elements \\(S=\\{H,T\\}\\). We define a sequence of random variables \\(X_1,X_2,\\cdots\\) on this sample space as follows:\n\\[\n\\nonumber X_n(s) = \\left\\{\n\\begin{array}{l l}\n\\frac{1}{n+1} & \\qquad \\textrm{ if }s=H \\\\\n& \\qquad \\\\\n1 & \\qquad \\textrm{ if }s=T\n\\end{array} \\right.\n\\]\n\nAre the \\(X_i\\) independent?\nNo, they are dependent as they are measuring the same coin.\nFind the PMF and CDF of \\(X_n\\), \\(F_{X_n}(x)\\) for \\(n=1,2,3,\\cdots\\).\nThe PMF are\n\n\\[\n   \\nonumber P_{{\\large X_n}}(x)=P(X_n=x) = \\left\\{\n   \\begin{array}{l l}\n   \\frac{1}{2} & \\qquad \\textrm{ if }x=\\frac{1}{n+1} \\\\\n   & \\qquad \\\\\n   \\frac{1}{2} & \\qquad \\textrm{ if }x=1\n   \\end{array} \\right.\n\\]\nCorrespondingly, the CDF are\n\\[\n   \\nonumber F_{{\\large X_n}}(x)=P(X_n \\leq x) = \\left\\{\n   \\begin{array}{l l}\n   1 & \\qquad \\textrm{ if }x \\geq 1\\\\\n   & \\qquad \\\\\n   \\frac{1}{2} & \\qquad \\textrm{ if }\\frac{1}{n+1} \\leq x &lt;1 \\\\\n   & \\qquad \\\\\n   0 & \\qquad \\textrm{ if }x&lt; \\frac{1}{n+1}\n   \\end{array} \\right.\n\\]\n\nAs \\(n\\) goes to infinity, what does \\(F_{X_n}(x)\\) look like?",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Review on Basic Probabilities, Sampling Distribution and Normal related Distributions</span>"
    ]
  },
  {
    "objectID": "note1.html#sampling-distribution",
    "href": "note1.html#sampling-distribution",
    "title": "1  Review on Basic Probabilities, Sampling Distribution and Normal related Distributions",
    "section": "1.2 Sampling Distribution",
    "text": "1.2 Sampling Distribution\n\n1.2.1 Statistic and Parameter\n\nDefinition: Statistics\nA statistic is a function of the observable random variables in a sample and known constants.\n\n\n\n\n\nStatistic\nParameter\n\n\n\n\nMean\n\\(\\bar{x}\\)\n\\(\\mu\\)\n\n\nStandard Deviation\n\\(s\\)\n\\(\\sigma\\)\n\n\nProportion\n\\(\\hat{p}\\)\n\\(p\\)\n\n\n\\(\\vdots\\)\n\\(\\vdots\\)\n\\(\\vdots\\)\n\n\nIn general\n\\(\\hat{\\theta}\\)\n\\(\\theta\\)\n\n\n\n\nDefinition: Sampling Distribution.\nAll statistics have probability distributions, which we will call them sampling distributions.\n\n\n\n1.2.2 Sample Mean\n\nSample Mean: \\[\n\\bar{X}=\\frac{\\sum_{i=1}^n X_i}{n}\n\\] refered as a random varible \\(\\bar{X}\\) as a function of random variables \\(X_1,X_2,\\cdots, X_n\\).\n\nHere we discuss the mean and variance of this random variable, that is to say the R.V. \\(\\bar{X}\\).\n\n\n1.2.3 Law of Large Numbers\nTo start, we specify the Law of large numbers. There are two main versions of the Law of large numbers\nThe Weak Law of Large Numbers (WLLN):\nLet \\(X_1,X_2,\\cdots,X_n\\) be i.i.d. random variables with finite expected value \\(E(X_i)=\\mu&lt;\\infty\\). Then, for any \\(\\epsilon&gt;0\\),\n\\[\\lim_{n\\rightarrow \\infty}P\\big(|\\bar{X}-\\mu| \\geq \\epsilon\\big)=0 \\]\nThat is\n\\[\n\\bar{X}\\xrightarrow{p} \\mu\n\\]\nProof\nAssume the variance of \\(X\\) be \\(Var(X)=\\sigma^2\\) is finite. In this case, we can use Chebyshev’s inequality to write \\[\nP(|\\bar{X}-\\mu| \\geq \\epsilon) \\leq \\frac{Var(\\bar{X})}{\\epsilon^2}=\\frac{Var(X)}{n\\epsilon^2}\n\\] This goes to zero as \\(n\\rightarrow \\infty\\).\n\nThe Strong Law of Large Numbers (SLLN): Let \\(X_1,X_2,\\cdots,X_n\\) be i.i.d. random variables with finite expected value \\(E(X_i)=\\mu&lt;\\infty\\).\n\n\\[\n\\bar{X} \\xrightarrow{a.s.} \\mu\n\\]",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Review on Basic Probabilities, Sampling Distribution and Normal related Distributions</span>"
    ]
  },
  {
    "objectID": "note1.html#reference",
    "href": "note1.html#reference",
    "title": "1  Review on Basic Probabilities, Sampling Distribution and Normal related Distributions",
    "section": "1.3 Reference",
    "text": "1.3 Reference\n\nPishro-Nik, H. (2016). Introduction to probability, statistics, and random processes.\nWackerly, D., Mendenhall, W., & Scheaffer, R. L. (2014). Mathematical statistics with applications. Cengage Learning.\nCasella, G., & Berger, R. L. (2021). Statistical inference. Cengage Learning.\nHogg, R. V., & Craig, A. T. (1995). Introduction to mathematical statistics.(5”” edition). Englewood Hills, New Jersey.\nTerry Tao’s Blog\nt-distribution",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Review on Basic Probabilities, Sampling Distribution and Normal related Distributions</span>"
    ]
  },
  {
    "objectID": "note2.html#normal-distribution",
    "href": "note2.html#normal-distribution",
    "title": "2  Normal Distribution, Chi-Square Distribution, t Distribution and F Distribution",
    "section": "",
    "text": "Normal Distribution:\n\n\n\nTheorem: Let \\(Y_1, Y_2, \\cdots, Y_n\\) be a random sample of size \\(n\\) from a normal distribution with mean \\(\\mu\\) and variance \\(\\sigma^2\\). Then,\n\n\n\n2.1.0.1 Standardized Z-Value\n\nStandard Normal Distribution: Z \\[\nZ=\\frac{\\bar{Y}-\\mu_{y}}{\\sigma_{\\bar{Y}}}=\\frac{\\bar{Y}-\\mu}{\\sigma/\\sqrt{n}}\n\\]\n\nWe can use the Standard Normal Table or the softwares (R) to find the corresponding quantiles and probability.\n\nqnorm(p,mu,sigma)\n\npnorm(q,mu,sigma)\n\n\n2.1.0.1.0.1 Example: Calculation\nA bottling machine can be regulated so that it discharges an average of \\(\\mu\\) ounces perbottle. It has been observed that the amount of fill dispensed bythe machine is normally distributed with \\(\\sigma = 1.0\\) ounce. A sample of \\(n = 9\\) filled bottles is randomly selected from the output of the machine on a given day (all bottled with the same machine setting), and the ounces of fill are measured for each.\n\nFind the probability that the sample mean will be within \\(0.3\\) ounce of the true mean \\(\\mu\\) for the chosen machine setting.\nHow many observations should be included in the sample if we wish \\(Y\\) to be within .3 ounce of \\(\\mu\\) with probability .95?",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Normal Distribution, Chi-Square Distribution, t Distribution and F Distribution</span>"
    ]
  },
  {
    "objectID": "note2.html#the-chi-square-distribution-a-special-gamma-distribution",
    "href": "note2.html#the-chi-square-distribution-a-special-gamma-distribution",
    "title": "2  Normal Distribution, Chi-Square Distribution, t Distribution and F Distribution",
    "section": "2.2 The Chi-Square distribution (a special Gamma distribution)",
    "text": "2.2 The Chi-Square distribution (a special Gamma distribution)\nTheorem: Let \\(Y_1, Y_2, \\cdots, Y_n\\) be a random sample of size \\(n\\) from a normal distribution with mean \\(\\mu\\) and variance \\(\\sigma^2\\).\nThen,\n\\[\nZ_i=\\frac{Y_i-\\mu}{\\sigma}\n\\]\nare independent standard normal random variables, \\(i=1,\\cdots,n\\) and\n\\[\n\\sum_{i=1}^n Z_i^2=\\sum_{i}\\left(\\frac{Y_i-\\mu}{n}\\right)^2\n\\]\nhas a \\(\\chi^2\\)-distribution with \\(n\\) degree of freedom (df).\nThe proof can be conducted by the moment generating function.\n\n2.2.0.0.1 Example: \\(\\chi^2\\) distribution derviation\nThe moment generating function of \\(Z^2\\) is\n\\[\n\\begin{aligned}\nm_{Z^2}(t)=E(e^{tZ^2})&=\\int_{-\\infty}^\\infty e^{tz^2}f(z)dz\\\\\n&= \\int_{-\\infty}^{\\infty} \\frac{1}{\\sqrt{2\\pi}} e^{-z^2(1-2t)/2}dz\\\\\n&=\\frac{1}{(1-2t)^{1/2}} \\int\\frac{1}{\\sqrt{2\\pi}(1-2t)^{-1/2}}\\exp\\left(-\\frac{z^2/2}{(1-2t)^{-1}}\\right)dz \\\\\n&=\\frac{1}{(1-2t)^{1/2}} \\\\\n\\end{aligned}\n\\]\nwith the corresponding density function of \\(U=Z^2\\) is given by\n\\[\nf_U(u)=\\frac{u^{-1/2}e^{-u/2}}{\\Gamma(1/2)2^{1/2}}\n\\]\nwhich, is a Gamma distribution with (\\(\\alpha=1/2, \\beta=2\\)) and is also called the \\(\\chi^2\\) distribution with degree of freedom 1.\nMore over, for the \\(V=\\sum_{i=1}^n Z_i^2=\\sum_{i=1}^nU_i\\),\n\\[\nm_V(t)=\\prod(m_{Z_i^2}(t))=\\left((1-2t)^{-1/2}\\right)^n=(1-2t)^{-n/2}\n\\]\nwith the corresponding density function,\n\\[\nf_V(v)=\\frac{u^{-n/2}e^{-u/2}}{\\Gamma(n/2)2^{n/2}}\n\\]\nwhich is a Gamma(\\(\\alpha\\), \\(\\beta\\)) and \\(\\alpha=n/2\\) and \\(\\beta=2\\),\n\\[\nf(x)=\\frac{1}{\\Gamma(\\alpha)\\beta^\\alpha}x^{\\alpha-1}e^{-x/\\beta}\n\\]\n\n\n2.2.0.0.2 Example: Calculation\nIf \\(Z_1,\\cdots,Z_6\\) denotes a random sample from standard normal distribution, find a number b such that \\[\nP(\\sum_{i=1}^6Z^2_i\\leq b)=0.95\n\\]\nAs \\(\\sum_{i=1}^6 Z^2_i\\) has a \\(\\chi^2\\) distribution with degree of freedom 6, we can get either in the \\(\\chi^2\\) table or using the software, such as rcode below\n\nqchisq(0.95,6)\n\n[1] 12.59159\n\n\nFind out that\n\\[\nP(\\sum_{i=1}^6Z^2_i\\leq 12.59159)=0.95\n\\]\n\nTheorem: Let \\(Y_1, Y_2, \\cdots, Y_n\\) be a random sample of size \\(n\\) from a normal distribution with mean \\(\\mu\\) and variance \\(\\sigma^2\\). Then, \\[\n\\frac{(n-1)s^2}{\\sigma^2}=\\frac{\\sum_{i=1}^n(Y_i-\\bar{Y})^2}{\\sigma^2}\n\\] has a \\(\\chi^2\\) distribution with \\(n-1\\) degree of freedom.\n\\(\\bar{Y}\\) and \\(S^2\\) are independent random variables.\n\n\n\n2.2.0.0.3 Example: Prove the above theorem when \\(n=2\\)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Normal Distribution, Chi-Square Distribution, t Distribution and F Distribution</span>"
    ]
  },
  {
    "objectID": "note2.html#the-t-distribution",
    "href": "note2.html#the-t-distribution",
    "title": "2  Normal Distribution, Chi-Square Distribution, t Distribution and F Distribution",
    "section": "2.3 The t distribution",
    "text": "2.3 The t distribution\n\nTheorem: Let \\(Z\\) be a standard normal random variable and let \\(W\\) be a \\(\\chi^2\\) distributed variable with \\(k\\) degree of freedom. Then, if \\(Z\\) and \\(W\\) are independent,\n\n\\[\nT=\\frac{Z}{\\sqrt{W/k}}\n\\]\nis a t distribution with d.f. \\(k\\), with density function,\n\\[\nf(t)=\\frac{\\Gamma(\\frac{k+1}{2})}{\\Gamma(\\frac{k}{2})}\\,\n\\frac{1}{\\sqrt{k\\,\\pi}}\\,\n\\left(1+\\frac{t^2}{k}\\right)^{-\\frac{k+1}{2}}\n\\]\n\n2.3.0.0.1 Example: Suppose that \\(T\\) is R.V. as above, derive its p.d.f.\n\nIf \\(T\\) is given by \\(\\frac{U}{\\sqrt{V/k}}\\), find the joint density of \\(U\\) and \\(V\\).\nFind the density function of \\(T\\).\n\n\\[\n   f_{U,V}(u,v) = \\underbrace{\\frac{1}{(2\\pi)^{1/2}} e^{-u^2/2}}_{\\text{pdf } N(0,1)}\\quad \\underbrace{\\frac{1}{\\Gamma(\\frac{k}{2})\\,2^{k/2}}\\,v^{(k/2)-1}\\, e^{-v/2}}_{\\text{pdf }\\chi^2_k}\n\\]\nDenote\n\\[\n   t=\\frac{u}{\\sqrt{v/k}}, \\quad w=v\n\\]\nwhere\n\\[\n   u=t(\\frac{w}{k})^{1/2}, \\quad v= w\n\\]\nThe Jacobian matrix can be find as\n\\[\n   J=\\begin{vmatrix}\n   \\frac{du}{dt} & \\frac{du}{dw}\\\\\n   \\frac{dv}{dt} & \\frac{dv}{dw}\\\\\n   \\end{vmatrix}=\\begin{vmatrix}\n   (\\frac{w}{k})^{1/2} & \\frac{1}{2}t(\\frac{1}{wk})^{1/2}\\\\\n   0&1\n   \\end{vmatrix}=(\\frac{w}{k})^{1/2}\n\\]\nHence, the marginal p.d.f. is\n\\[\n   \\begin{aligned}\n   f_T(t) &= \\displaystyle\\int_0^\\infty \\,f_{U,V}\\bigg(t\\,(\\frac{w}{k})^{1/2},w\\bigg)(w/k)^{1/2}\\,\\mathrm{d} w\\\\[2ex]\n   &= \\frac{1}{(2\\pi)^{1/2}}\\frac{1}{\\Gamma(\\frac{k}{2})2^{k/2}}\\,\n   \\int_0^\\infty\\,\n   e^{-\\frac{\\left(t(\\frac{w}{k})^{1/2}\\right)^2}{2}}\n   w^{(k/2)-1}\n   e^{-(\\frac{w}{2})}\n   \\frac{w^{1/2}}{k^{1/2}}\\,\\mathrm{d}w\\\\[2ex]\n   &= \\frac{1}{(2\\pi)^{1/2}}\\frac{1}{\\Gamma(\\frac{k}{2})2^{k/2}k^{1/2}}\\,\n   \\displaystyle\\int_0^\\infty\\,\n   w^{((k+1)/2)-1}\\,e^{-(1/2)(1 + t^2/k)w}\\,\\mathrm{d}w\n   \\end{aligned}\n\\]\nwhere\n\\[\n   \\int_0^\\infty\\,\n   w^{((k+1)/2)-1}\\,e^{-(1/2)(1 + t^2/k)w}\\,\\mathrm{d}w=\\int_0^{\\infty}w^{\\alpha-1}\\,e^{-\\lambda w}dw=\\frac{\\lambda^\\alpha}{\\Gamma(\\alpha)}\n\\]\nwhere\n\\[\n   \\alpha=(k+1)/2,\\,\\quad \\lambda=(1/2)(1+t^2/k)\n\\]\nThus,\n\\[\n   \\begin{aligned}\n   f_T(t)&= \\frac{1}{(2\\pi)^{1/2}}\\frac{1}{\\Gamma\\left(\\frac{k}{2}\\right)2^{k/2}k^{1/2}}\\,\n   \\frac{\\Gamma\\left((k+1)/2\\right)}{\\left((1/2)(1+t^2/k)\\right)^{(k+1)/2}}\\\\[2ex]\n   &=\\frac{1}{(2\\pi)^{1/2}}\\frac{1}{\\Gamma\\left(\\frac{k}{2}\\right)\\,2^{k/2}k^{1/2}}\\,\\Gamma\\left((k+1)/2\\right)\\,\n   \\Big[\\frac{2}{(1+t^2/k)}\\Big]^{(k+1)/2}\\\\[2ex]\n   &= \\frac{\\Gamma\\left(\\frac{k+1}{2}\\right)}{\\Gamma\\left(\\frac{k}{2}\\right)}\\,\n   \\frac{1}{(2\\pi)^{1/2}2^{k/2}k^{1/2}}\\,\n   \\Big[\\frac{2}{(1+t^2/k)}\\Big]^{(k+1)/2}\\\\[2ex]\n   &=\\frac{\\Gamma\\left(\\frac{k+1}{2}\\right)}{\\Gamma\\left(\\frac{k}{2}\\right)}\\,\n   \\frac{1}{(2\\pi)^{1/2}2^{k/2}k^{1/2}}\\,\n   \\frac{2^{(k+1)/2}}{(1+t^2/k)^{(k+1)/2}}\\\\[2ex]\n   &= \\frac{\\Gamma\\left(\\frac{k+1}{2}\\right)}{\\Gamma\\left(\\frac{k}{2}\\right)}\\,\n   \\frac{1}{(\\pi)^{1/2}k^{1/2}}\\,\n   \\frac{1}{(1+t^2/k)^{(k+1)/2}}\\\\[2ex]\n   &=\\frac{\\Gamma(\\frac{k+1}{2})}{\\Gamma(\\frac{k}{2})}\\,\n   \\frac{1}{\\sqrt{k\\,\\pi}}\\,\n   \\left(1+\\frac{t^2}{k}\\right)^{-\\frac{k+1}{2}}\n   \\end{aligned}\n\\]\nwhich is the pdf of the t-Student or Gosset distribution with \\(k\\) degrees of freedom (or \\(n\\) degrees of freedom).\n\n2.3.0.0.1.1 Example: Calculation\nThe tensile strength for a type of wire is normally distributed with unknown mean \\(\\mu\\) and unknown variance \\(\\sigma^2\\). Six pieces of wire were randomly selected from a large roll; \\(Y_i\\), the tensile strength for portion \\(i\\), is measured for \\(i = 1, 2, . . . , 6\\). The population mean \\(\\mu\\) and variance \\(\\sigma^2\\) can be estimated by \\(\\bar{Y}\\) and \\(s^2\\), respectively.\nFind the approximate probability that \\(\\bar{Y}\\) will be within \\(2S/\\sqrt{n}\\) of the true population mean \\(\\mu\\).\n\npt(2,5)-pt(-2,5)\n\n[1] 0.8980605\n\n\nAs\n\\[\nT=\\frac{\\bar{Y}-\\mu}{S/\\sqrt{n}}\n\\]\nThen\n\\[\nP(|\\bar{Y}-\\mu|\\leq 2S/\\sqrt{n})=P(-2\\leq T \\leq 2)= P(T\\leq 2)-P(T\\leq -2)=?\n\\]",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Normal Distribution, Chi-Square Distribution, t Distribution and F Distribution</span>"
    ]
  },
  {
    "objectID": "note2.html#the-f-distribution",
    "href": "note2.html#the-f-distribution",
    "title": "2  Normal Distribution, Chi-Square Distribution, t Distribution and F Distribution",
    "section": "2.4 The F Distribution",
<<<<<<< HEAD
    "text": "2.4 The F Distribution\nSuppose that we want to compare the variances of two normal populations based on information contained in independent random samples from the two populations.\n\nThe F Distribution: Let \\(W_1\\) and \\(W_2\\) be independent \\(\\chi^2\\) distributed random variables with \\(v_1\\) and \\(v_2\\) degree of freedom. Then, \\[\nF=\\frac{W_1/v_1}{W_2/v_2}=\\frac{(n-1)S^2_1/\\sigma^2_1/(n_1-1)}{(n-1)S^2_2/\\sigma^2_2/(n_2-1)}=\\frac{S^2_1/\\sigma^2_1}{S^2_2/\\sigma^2_2}\n\\] is an F distribution, \\(F(v_1=n_1-1,v_2=n_2-1)\\).\n\n\n2.4.0.0.0.1 Example: Calculation\nIf there are two popluation with equal variance, we draw two sample with size \\(n_1=6\\) and \\(n_2=10\\), such that\n\\[\nP(\\frac{S^2_1}{S^2_2} \\leq b)=0.95\n\\]\nWhat is the value of b?\n\nqf(p,v1,v2)\npf(q,v1,v2)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Normal Distribution, Chi-Square Distribution, t Distribution and F Distribution</span>"
    ]
  },
  {
    "objectID": "note1.html",
    "href": "note1.html",
    "title": "1  Review on Basic Probabilities, Sampling Distribution and Normal related Distributions",
    "section": "",
    "text": "1.1 Convergence and Statistics",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Review on Basic Probabilities, Sampling Distribution and Normal related Distributions</span>"
    ]
=======
    "text": "2.4 The F Distribution\nSuppose that we want to compare the variances of two normal populations based on information contained in independent random samples from the two populations.\n\nThe F Distribution: Let \\(W_1\\) and \\(W_2\\) be independent \\(\\chi^2\\) distributed random variables with \\(v_1\\) and \\(v_2\\) degree of freedom. Then, \\[\nF=\\frac{W_1/v_1}{W_2/v_2}=\\frac{(n-1)S^2_1/\\sigma^2_1/(n_1-1)}{(n-1)S^2_2/\\sigma^2_2/(n_2-1)}=\\frac{S^2_1/\\sigma^2_1}{S^2_2/\\sigma^2_2}\n\\] is an F distribution, \\(F(v_1=n_1-1,v_2=n_2-1)\\).\n\n\n2.4.0.0.0.1 Example: Calculation\nIf there are two popluation with equal variance, we draw two sample with size \\(n_1=6\\) and \\(n_2=10\\), such that\n\\[\nP(\\frac{S^2_1}{S^2_2} \\leq b)=0.95\n\\]\nWhat is the value of b?\n\nqf(p,v1,v2)\npf(q,v1,v2)"
  },
  {
    "objectID": "isl2.html#basic-commands",
    "href": "isl2.html#basic-commands",
    "title": "4  Introduction to R",
    "section": "4.1 Basic Commands",
    "text": "4.1 Basic Commands\nR uses functions to perform operations. To run a function called funcname, we type funcname(input1, input2), where the inputs (or arguments) input1 and input2 tell R how to run the function. A function can have any number of inputs. For example, to create a vector of numbers, we use the function c() (for concatenate). Any numbers inside the parentheses are joined together. The following command instructs R to join together the numbers 1, 3, 2, and 5, and to save them as a vector named x. When we type x, it gives us back the vector.\n\nx &lt;- c(1, 3, 2, 5)\nx\n\n[1] 1 3 2 5\n\n\nNote that the &gt; is not part of the command; rather, it is printed by R to indicate that it is ready for another command to be entered. We can also save things using = rather than &lt;-:\n\nx = c(1, 6, 2)\nx\n\n[1] 1 6 2\n\ny = c(1, 4, 3)\n\nHitting the up arrow multiple times will display the previous commands, which can then be edited. This is useful since one often wishes to repeat a similar command. In addition, typing ?funcname will always cause R to open a new help file window with additional information about the function funcname().\nWe can tell R to add two sets of numbers together. It will then add the first number from x to the first number from y, and so on. However, x and y should be the same length. We can check their length using the length() function.\n\nlength(x)\n\n[1] 3\n\nlength(y)\n\n[1] 3\n\nx + y\n\n[1]  2 10  5\n\n\nThe ls() function allows us to look at a list of all of the objects, such as data and functions, that we have saved so far. The rm() function can be used to delete any that we don’t want.\n\nls()\n\n[1] \"has_annotations\" \"x\"               \"y\"              \n\nrm(x, y)\nls()\n\n[1] \"has_annotations\"\n\n\nIt’s also possible to remove all objects at once:\n\nrm(list = ls())\n\nThe matrix() function can be used to create a matrix of numbers. Before we use the matrix() function, we can learn more about it:\n\n?matrix\n\nThe help file reveals that the matrix() function takes a number of inputs, but for now we focus on the first three: the data (the entries in the matrix), the number of rows, and the number of columns. First, we create a simple matrix.\n\nx &lt;- matrix(data = c(1, 2, 3, 4), nrow = 2, ncol = 2)\nx\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n\nNote that we could just as well omit typing data=, nrow=, and ncol= in the matrix() command above: that is, we could just type\n\nx &lt;- matrix(c(1, 2, 3, 4), 2, 2)\n\nand this would have the same effect. However, it can sometimes be useful to specify the names of the arguments passed in, since otherwise R will assume that the function arguments are passed into the function in the same order that is given in the function’s help file. As this example illustrates, by default R creates matrices by successively filling in columns. Alternatively, the byrow = TRUE option can be used to populate the matrix in order of the rows.\n\nmatrix(c(1, 2, 3, 4), 2, 2, byrow = TRUE)\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n\n\nNotice that in the above command we did not assign the matrix to a value such as x. In this case the matrix is printed to the screen but is not saved for future calculations. The sqrt() function returns the square root of each element of a vector or matrix. The command x^2 raises each element of x to the power 2; any powers are possible, including fractional or negative powers.\n\nsqrt(x)\n\n         [,1]     [,2]\n[1,] 1.000000 1.732051\n[2,] 1.414214 2.000000\n\nx^2\n\n     [,1] [,2]\n[1,]    1    9\n[2,]    4   16\n\n\nThe rnorm() function generates a vector of random normal variables, with first argument n the sample size. Each time we call this function, we will get a different answer. Here we create two correlated sets of numbers, x and y, and use the cor() function to compute the correlation between them.\n\nx &lt;- rnorm(50)\ny &lt;- x + rnorm(50, mean = 50, sd = .1)\ncor(x, y)\n\n[1] 0.993992\n\n\nBy default, rnorm() creates standard normal random variables with a mean of \\(0\\) and a standard deviation of \\(1\\). However, the mean and standard deviation can be altered using the mean and sd arguments, as illustrated above. Sometimes we want our code to reproduce the exact same set of random numbers; we can use the set.seed() function to do this. The set.seed() function takes an (arbitrary) integer argument.\n\nset.seed(1303)\nrnorm(50)\n\n [1] -1.1439763145  1.3421293656  2.1853904757  0.5363925179  0.0631929665\n [6]  0.5022344825 -0.0004167247  0.5658198405 -0.5725226890 -1.1102250073\n[11] -0.0486871234 -0.6956562176  0.8289174803  0.2066528551 -0.2356745091\n[16] -0.5563104914 -0.3647543571  0.8623550343 -0.6307715354  0.3136021252\n[21] -0.9314953177  0.8238676185  0.5233707021  0.7069214120  0.4202043256\n[26] -0.2690521547 -1.5103172999 -0.6902124766 -0.1434719524 -1.0135274099\n[31]  1.5732737361  0.0127465055  0.8726470499  0.4220661905 -0.0188157917\n[36]  2.6157489689 -0.6931401748 -0.2663217810 -0.7206364412  1.3677342065\n[41]  0.2640073322  0.6321868074 -1.3306509858  0.0268888182  1.0406363208\n[46]  1.3120237985 -0.0300020767 -0.2500257125  0.0234144857  1.6598706557\n\n\nWe use set.seed() throughout the labs whenever we perform calculations involving random quantities. In general this should allow the user to reproduce our results. However, as new versions of R become available, small discrepancies may arise between this book and the output from R.\nThe mean() and var() functions can be used to compute the mean and variance of a vector of numbers. Applying sqrt() to the output of var() will give the standard deviation. Or we can simply use the sd() function.\n\nset.seed(3)\ny &lt;- rnorm(100)\nmean(y)\n\n[1] 0.01103557\n\nvar(y)\n\n[1] 0.7328675\n\nsqrt(var(y))\n\n[1] 0.8560768\n\nsd(y)\n\n[1] 0.8560768"
  },
  {
    "objectID": "isl2.html#graphics",
    "href": "isl2.html#graphics",
    "title": "4  Introduction to R",
    "section": "4.2 Graphics",
    "text": "4.2 Graphics\nThe plot() function is the primary way to plot data in R. For instance, plot(x, y) produces a scatterplot of the numbers in x versus the numbers in y. There are many additional options that can be passed in to the plot() function. For example, passing in the argument xlab will result in a label on the \\(x\\)-axis. To find out more information about the plot() function, type ?plot.\n\nx &lt;- rnorm(100)\ny &lt;- rnorm(100)\nplot(x, y)\n\n\n\nplot(x, y, xlab = \"this is the x-axis\",\n    ylab = \"this is the y-axis\",\n    main = \"Plot of X vs Y\")\n\n\n\n\nWe will often want to save the output of an R plot. The command that we use to do this will depend on the file type that we would like to create. For instance, to create a pdf, we use the pdf() function, and to create a jpeg, we use the jpeg() function.\n\npdf(\"Figure.pdf\")\nplot(x, y, col = \"green\")\ndev.off()\n\nquartz_off_screen \n                2 \n\n\nThe function dev.off() indicates to R that we are done creating the plot. Alternatively, we can simply copy the plot window and paste it into an appropriate file type, such as a Word document.\nThe function seq() can be used to create a sequence of numbers. For instance, seq(a, b) makes a vector of integers between a and b. There are many other options: for instance, seq(0, 1, length = 10) makes a sequence of 10 numbers that are equally spaced between 0 and 1. Typing 3:11 is a shorthand for seq(3, 11) for integer arguments.\n\nx &lt;- seq(1, 10)\nx\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nx &lt;- 1:10\nx\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nx &lt;- seq(-pi, pi, length = 50)\n\nWe will now create some more sophisticated plots. The contour() function produces a contour plot in order to represent three-dimensional data; it is like a topographical map. It takes three arguments:\n\nA vector of the x values (the first dimension),\nA vector of the y values (the second dimension), and\nA matrix whose elements correspond to the z value (the third dimension) for each pair of (x, y) coordinates.\n\nAs with the plot() function, there are many other inputs that can be used to fine-tune the output of the contour() function. To learn more about these, take a look at the help file by typing ?contour.\n\ny &lt;- x\nf &lt;- outer(x, y, function(x, y) cos(y) / (1 + x^2))\ncontour(x, y, f)\ncontour(x, y, f, nlevels = 45, add = T)\n\n\n\nfa &lt;- (f - t(f)) / 2\ncontour(x, y, fa, nlevels = 15)\n\n\n\n\nThe image() function works the same way as contour(), except that it produces a color-coded plot whose colors depend on the z value. This is known as a heatmap, and is sometimes used to plot temperature in weather forecasts. Alternatively, persp() can be used to produce a three-dimensional plot. The arguments theta and phi control the angles at which the plot is viewed.\n\nimage(x, y, fa)\n\n\n\npersp(x, y, fa)\n\n\n\npersp(x, y, fa, theta = 30)\n\n\n\npersp(x, y, fa, theta = 30, phi = 20)\n\n\n\npersp(x, y, fa, theta = 30, phi = 70)\n\n\n\npersp(x, y, fa, theta = 30, phi = 40)"
  },
  {
    "objectID": "isl2.html#indexing-data",
    "href": "isl2.html#indexing-data",
    "title": "4  Introduction to R",
    "section": "4.3 Indexing Data",
    "text": "4.3 Indexing Data\nWe often wish to examine part of a set of data. Suppose that our data is stored in the matrix A.\n\nA &lt;- matrix(1:16, 4, 4)\nA\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    5    9   13\n[2,]    2    6   10   14\n[3,]    3    7   11   15\n[4,]    4    8   12   16\n\n\nThen, typing\n\nA[2, 3]\n\n[1] 10\n\n\nwill select the element corresponding to the second row and the third column. The first number after the open-bracket symbol [ always refers to the row, and the second number always refers to the column. We can also select multiple rows and columns at a time, by providing vectors as the indices.\n\nA[c(1, 3), c(2, 4)]\n\n     [,1] [,2]\n[1,]    5   13\n[2,]    7   15\n\nA[1:3, 2:4]\n\n     [,1] [,2] [,3]\n[1,]    5    9   13\n[2,]    6   10   14\n[3,]    7   11   15\n\nA[1:2, ]\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    5    9   13\n[2,]    2    6   10   14\n\nA[, 1:2]\n\n     [,1] [,2]\n[1,]    1    5\n[2,]    2    6\n[3,]    3    7\n[4,]    4    8\n\n\nThe last two examples include either no index for the columns or no index for the rows. These indicate that R should include all columns or all rows, respectively. R treats a single row or column of a matrix as a vector.\n\nA[1, ]\n\n[1]  1  5  9 13\n\n\nThe use of a negative sign - in the index tells R to keep all rows or columns except those indicated in the index.\n\nA[-c(1, 3), ]\n\n     [,1] [,2] [,3] [,4]\n[1,]    2    6   10   14\n[2,]    4    8   12   16\n\nA[-c(1, 3), -c(1, 3, 4)]\n\n[1] 6 8\n\n\nThe dim() function outputs the number of rows followed by the number of columns of a given matrix.\n\ndim(A)\n\n[1] 4 4"
  },
  {
    "objectID": "isl2.html#loading-data",
    "href": "isl2.html#loading-data",
    "title": "4  Introduction to R",
    "section": "4.4 Loading Data",
    "text": "4.4 Loading Data\nFor most analyses, the first step involves importing a data set into R. The read.table() function is one of the primary ways to do this. The help file contains details about how to use this function. We can use the function write.table() to export data.\nBefore attempting to load a data set, we must make sure that R knows to search for the data in the proper directory. For example, on a Windows system one could select the directory using the Change dir ... option under the File menu. However, the details of how to do this depend on the operating system (e.g. Windows, Mac, Unix) that is being used, and so we do not give further details here.\nWe begin by loading in the Auto data set. This data is part of the ISLR2 library, discussed in Chapter 3. To illustrate the read.table() function, we load it now from a text file, Auto.data, which you can find on the textbook website. The following command will load the Auto.data file into R and store it as an object called Auto, in a format referred to as a data frame. Once the data has been loaded, the View() function can be used to view it in a spreadsheet-like window. (This function can sometimes be a bit finicky. If you have trouble using it, then try the head() function instead.) The head() function can also be used to view the first few rows of the data.\n\nAuto &lt;- read.table(\"Auto.data\")\n\nWarning in file(file, \"rt\"): cannot open file 'Auto.data': No such file or\ndirectory\n\n\nError in file(file, \"rt\"): cannot open the connection\n\nView(Auto)\n\nError in eval(expr, envir, enclos): object 'Auto' not found\n\nhead(Auto)\n\nError in eval(expr, envir, enclos): object 'Auto' not found\n\n\nNote that Auto.data is simply a text file, which you could alternatively open on your computer using a standard text editor. It is often a good idea to view a data set using a text editor or other software such as Excel before loading it into R.\nThis particular data set has not been loaded correctly, because R has assumed that the variable names are part of the data and so has included them in the first row. The data set also includes a number of missing observations, indicated by a question mark ?. Missing values are a common occurrence in real data sets. Using the option header = T (or header = TRUE) in the read.table() function tells R that the first line of the file contains the variable names, and using the option na.strings tells R that any time it sees a particular character or set of characters (such as a question mark), it should be treated as a missing element of the data matrix.\n\nAuto &lt;- read.table(\"Auto.data\", header = T, na.strings = \"?\", stringsAsFactors = T)\n\nWarning in file(file, \"rt\"): cannot open file 'Auto.data': No such file or\ndirectory\n\n\nError in file(file, \"rt\"): cannot open the connection\n\nView(Auto)\n\nError in eval(expr, envir, enclos): object 'Auto' not found\n\n\nThe stringsAsFactors = T argument tells R that any variable containing character strings should be interpreted as a qualitative variable, and that each distinct character string represents a distinct level for that qualitative variable. An easy way to load data from Excel into R is to save it as a csv (comma-separated values) file, and then use the read.csv() function.\n\nAuto &lt;- read.csv(\"Auto.csv\", na.strings = \"?\", stringsAsFactors = T)\n\nWarning in file(file, \"rt\"): cannot open file 'Auto.csv': No such file or\ndirectory\n\n\nError in file(file, \"rt\"): cannot open the connection\n\nView(Auto)\n\nError in eval(expr, envir, enclos): object 'Auto' not found\n\ndim(Auto)\n\nError in eval(expr, envir, enclos): object 'Auto' not found\n\nAuto[1:4, ]\n\nError in eval(expr, envir, enclos): object 'Auto' not found\n\n\nThe dim() function tells us that the data has \\(397\\) observations, or rows, and nine variables, or columns. There are various ways to deal with the missing data. In this case, only five of the rows contain missing observations, and so we choose to use the na.omit() function to simply remove these rows.\n\nAuto &lt;- na.omit(Auto)\n\nError in eval(expr, envir, enclos): object 'Auto' not found\n\ndim(Auto)\n\nError in eval(expr, envir, enclos): object 'Auto' not found\n\n\nOnce the data are loaded correctly, we can use names() to check the variable names.\n\nnames(Auto)\n\nError in eval(expr, envir, enclos): object 'Auto' not found"
  },
  {
    "objectID": "isl2.html#additional-graphical-and-numerical-summaries",
    "href": "isl2.html#additional-graphical-and-numerical-summaries",
    "title": "4  Introduction to R",
    "section": "4.5 Additional Graphical and Numerical Summaries",
    "text": "4.5 Additional Graphical and Numerical Summaries\nWe can use the plot() function to produce scatterplots of the quantitative variables. However, simply typing the variable names will produce an error message, because R does not know to look in the Auto data set for those variables.\n\nplot(cylinders, mpg)\n\nError in eval(expr, envir, enclos): object 'cylinders' not found\n\n\nTo refer to a variable, we must type the data set and the variable name joined with a $ symbol. Alternatively, we can use the attach() function in order to tell R to make the variables in this data frame available by name.\n\nplot(Auto$cylinders, Auto$mpg)\n\nError in eval(expr, envir, enclos): object 'Auto' not found\n\nattach(Auto)\n\nError in eval(expr, envir, enclos): object 'Auto' not found\n\nplot(cylinders, mpg)\n\nError in eval(expr, envir, enclos): object 'cylinders' not found\n\n\nThe cylinders variable is stored as a numeric vector, so R has treated it as quantitative. However, since there are only a small number of possible values for cylinders, one may prefer to treat it as a qualitative variable. The as.factor() function converts quantitative variables into qualitative variables.\n\ncylinders &lt;- as.factor(cylinders)\n\nError in eval(expr, envir, enclos): object 'cylinders' not found\n\n\nIf the variable plotted on the \\(x\\)-axis is qualitative, then boxplots will automatically be produced by the plot() function. As usual, a number of options can be specified in order to customize the plots.\n\nplot(cylinders, mpg)\n\nError in eval(expr, envir, enclos): object 'cylinders' not found\n\nplot(cylinders, mpg, col = \"red\")\n\nError in eval(expr, envir, enclos): object 'cylinders' not found\n\nplot(cylinders, mpg, col = \"red\", varwidth = T)\n\nError in eval(expr, envir, enclos): object 'cylinders' not found\n\nplot(cylinders, mpg, col = \"red\", varwidth = T,\n    horizontal = T)\n\nError in eval(expr, envir, enclos): object 'cylinders' not found\n\nplot(cylinders, mpg, col = \"red\", varwidth = T,\n    xlab = \"cylinders\", ylab = \"MPG\")\n\nError in eval(expr, envir, enclos): object 'cylinders' not found\n\n\nThe hist() function can be used to plot a histogram. Note that col = 2 has the same effect as col = \"red\".\n\nhist(mpg)\n\nError in eval(expr, envir, enclos): object 'mpg' not found\n\nhist(mpg, col = 2)\n\nError in eval(expr, envir, enclos): object 'mpg' not found\n\nhist(mpg, col = 2, breaks = 15)\n\nError in eval(expr, envir, enclos): object 'mpg' not found\n\n\nThe pairs() function creates a scatterplot matrix, i.e. a scatterplot for every pair of variables. We can also produce scatterplots for just a subset of the variables.\n\npairs(Auto)\n\nError in eval(expr, envir, enclos): object 'Auto' not found\n\npairs(\n    ~ mpg + displacement + horsepower + weight + acceleration,\n    data = Auto\n  )\n\nError in eval(m$data, parent.frame()): object 'Auto' not found\n\n\nIn conjunction with the plot() function, identify() provides a useful interactive method for identifying the value of a particular variable for points on a plot. We pass in three arguments to identify(): the \\(x\\)-axis variable, the \\(y\\)-axis variable, and the variable whose values we would like to see printed for each point. Then clicking one or more points in the plot and hitting Escape will cause R to print the values of the variable of interest. The numbers printed under the identify() function correspond to the rows for the selected points.\n\nplot(horsepower, mpg)\n\nError in eval(expr, envir, enclos): object 'horsepower' not found\n\nidentify(horsepower, mpg, name)\n\nError in eval(expr, envir, enclos): object 'horsepower' not found\n\n\nThe summary() function produces a numerical summary of each variable in a particular data set.\n\nsummary(Auto)\n\nError in eval(expr, envir, enclos): object 'Auto' not found\n\n\nFor qualitative variables such as name, R will list the number of observations that fall in each category. We can also produce a summary of just a single variable.\n\nsummary(mpg)\n\nError in eval(expr, envir, enclos): object 'mpg' not found\n\n\nOnce we have finished using R, we type q() in order to shut it down, or quit. When exiting R, we have the option to save the current workspace so that all objects (such as data sets) that we have created in this R session will be available next time. Before exiting R, we may want to save a record of all of the commands that we typed in the most recent session; this can be accomplished using the savehistory() function. Next time we enter R, we can load that history using the loadhistory() function, if we wish."
>>>>>>> de6819315c8d8ce26b5517135ade0c6dfac961cb
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Statistics",
    "section": "",
<<<<<<< HEAD
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "note2.html",
    "href": "note2.html",
    "title": "2  Normal Distribution, Chi-Square Distribution, t Distribution and F Distribution",
    "section": "",
    "text": "2.1 Normal Distribution\n\\[\nf_X(x)=\\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-\\frac{1}{2\\sigma^2}(x-\\mu)^2}\n\\]\n\\[\n\\bar{Y}=\\frac{1}{n}\\sum_{i=1}^n Y_i\n\\] is normally distributed with mean \\(\\mu_{\\bar{Y}}=E(\\bar{Y})=\\mu\\) and variance \\(\\sigma^2_{\\bar{Y}}=\\frac{\\sigma^2}{n}\\)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Normal Distribution, Chi-Square Distribution, t Distribution and F Distribution</span>"
    ]
=======
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "isl3.html#libraries",
    "href": "isl3.html#libraries",
    "title": "5  Linear Regression",
    "section": "5.1 Libraries",
    "text": "5.1 Libraries\nThe library() function is used to load libraries, or groups of functions and data sets that are not included in the base R distribution. Basic functions that perform least squares linear regression and other simple analyses come standard with the base distribution, but more exotic functions require additional libraries. Here we load the MASS package, which is a very large collection of data sets and functions. We also load the ISLR2 package, which includes the data sets associated with this book.\n\nlibrary(MASS)\nlibrary(ISLR2)\n\n\nAttaching package: 'ISLR2'\n\n\nThe following object is masked from 'package:MASS':\n\n    Boston\n\n\nIf you receive an error message when loading any of these libraries, it likely indicates that the corresponding library has not yet been installed on your system. Some libraries, such as MASS, come with R and do not need to be separately installed on your computer. However, other packages, such as ISLR2, must be downloaded the first time they are used. This can be done directly from within R. For example, on a Windows system, select the Install package option under the Packages tab. After you select any mirror site, a list of available packages will appear. Simply select the package you wish to install and R will automatically download the package. Alternatively, this can be done at the R command line via install.packages(\"ISLR2\"). This installation only needs to be done the first time you use a package. However, the library() function must be called within each R session."
  },
  {
    "objectID": "isl3.html#simple-linear-regression",
    "href": "isl3.html#simple-linear-regression",
    "title": "5  Linear Regression",
    "section": "5.2 Simple Linear Regression",
    "text": "5.2 Simple Linear Regression\nThe ISLR2 library contains the Boston data set, which records medv (median house value) for \\(506\\) census tracts in Boston. We will seek to predict medv using \\(12\\) predictors such as rmvar (average number of rooms per house), age (proportion of owner-occupied units built prior to 1940) and lstat (percent of households with low socioeconomic status).\n\nhead(Boston)\n\n     crim zn indus chas   nox    rm  age    dis rad tax ptratio lstat medv\n1 0.00632 18  2.31    0 0.538 6.575 65.2 4.0900   1 296    15.3  4.98 24.0\n2 0.02731  0  7.07    0 0.469 6.421 78.9 4.9671   2 242    17.8  9.14 21.6\n3 0.02729  0  7.07    0 0.469 7.185 61.1 4.9671   2 242    17.8  4.03 34.7\n4 0.03237  0  2.18    0 0.458 6.998 45.8 6.0622   3 222    18.7  2.94 33.4\n5 0.06905  0  2.18    0 0.458 7.147 54.2 6.0622   3 222    18.7  5.33 36.2\n6 0.02985  0  2.18    0 0.458 6.430 58.7 6.0622   3 222    18.7  5.21 28.7\n\n\nTo find out more about the data set, we can type ?Boston.\nWe will start by using the lm() function to fit a simple linear regression model, with medv as the response and lstat as the predictor. The basic syntax is lm(y ~ x, data), where y is the response, x is the predictor, and data is the data set in which these two variables are kept.\n\nlm.fit &lt;- lm(medv ~ lstat)\n\nError in eval(predvars, data, env): object 'medv' not found\n\n\nThe command causes an error because R does not know where to find the variables medv and lstat. The next line tells R that the variables are in Boston. If we attach Boston, the first line works fine because R now recognizes the variables.\n\nlm.fit &lt;- lm(medv ~ lstat, data = Boston)\nattach(Boston)\nlm.fit &lt;- lm(medv ~ lstat)\n\nIf we type lm.fit, some basic information about the model is output. For more detailed information, we use summary(lm.fit). This gives us \\(p\\)-values and standard errors for the coefficients, as well as the \\(R^2\\) statistic and \\(F\\)-statistic for the model.\n\nlm.fit\n\n\nCall:\nlm(formula = medv ~ lstat)\n\nCoefficients:\n(Intercept)        lstat  \n      34.55        -0.95  \n\nsummary(lm.fit)\n\n\nCall:\nlm(formula = medv ~ lstat)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-15.168  -3.990  -1.318   2.034  24.500 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 34.55384    0.56263   61.41   &lt;2e-16 ***\nlstat       -0.95005    0.03873  -24.53   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.216 on 504 degrees of freedom\nMultiple R-squared:  0.5441,    Adjusted R-squared:  0.5432 \nF-statistic: 601.6 on 1 and 504 DF,  p-value: &lt; 2.2e-16\n\n\nWe can use the names() function in order to find out what other pieces of information are stored in lm.fit. Although we can extract these quantities by name—e.g. lm.fit$coefficients—it is safer to use the extractor functions like coef() to access them.\n\nnames(lm.fit)\n\n [1] \"coefficients\"  \"residuals\"     \"effects\"       \"rank\"         \n [5] \"fitted.values\" \"assign\"        \"qr\"            \"df.residual\"  \n [9] \"xlevels\"       \"call\"          \"terms\"         \"model\"        \n\ncoef(lm.fit)\n\n(Intercept)       lstat \n 34.5538409  -0.9500494 \n\n\nIn order to obtain a confidence interval for the coefficient estimates, we can use the confint() command.\n\nconfint(lm.fit)\n\n                2.5 %     97.5 %\n(Intercept) 33.448457 35.6592247\nlstat       -1.026148 -0.8739505\n\n\nThe predict() function can be used to produce confidence intervals and prediction intervals for the prediction of medv for a given value of lstat.\n\npredict(lm.fit, data.frame(lstat = (c(5, 10, 15))),\n    interval = \"confidence\")\n\n       fit      lwr      upr\n1 29.80359 29.00741 30.59978\n2 25.05335 24.47413 25.63256\n3 20.30310 19.73159 20.87461\n\npredict(lm.fit, data.frame(lstat = (c(5, 10, 15))),\n    interval = \"prediction\")\n\n       fit       lwr      upr\n1 29.80359 17.565675 42.04151\n2 25.05335 12.827626 37.27907\n3 20.30310  8.077742 32.52846\n\n\nFor instance, the 95 % confidence interval associated with a lstat value of 10 is \\((24.47, 25.63)\\), and the 95 % prediction interval is \\((12.828, 37.28)\\). As expected, the confidence and prediction intervals are centered around the same point (a predicted value of \\(25.05\\) for medv when lstat equals 10), but the latter are substantially wider.\nWe will now plot medv and lstat along with the least squares regression line using the plot() and abline() functions.\n\nplot(lstat, medv)\nabline(lm.fit)\n\n\n\n\nThere is some evidence for non-linearity in the relationship between lstat and medv. We will explore this issue later in this lab.\nThe abline() function can be used to draw any line, not just the least squares regression line. To draw a line with intercept a and slope b, we type abline(a, b). Below we experiment with some additional settings for plotting lines and points. The lwd = 3 command causes the width of the regression line to be increased by a factor of 3; this works for the plot() and lines() functions also. We can also use the pch option to create different plotting symbols.\n\nplot(lstat, medv)\nabline(lm.fit, lwd = 3)\nabline(lm.fit, lwd = 3, col = \"red\")\n\n\n\nplot(lstat, medv, col = \"red\")\n\n\n\nplot(lstat, medv, pch = 20)\n\n\n\nplot(lstat, medv, pch = \"+\")\n\n\n\nplot(1:20, 1:20, pch = 1:20)\n\n\n\n\nNext we examine some diagnostic plots, several of which were discussed in Section 3.3.3. Four diagnostic plots are automatically produced by applying the plot() function directly to the output from lm(). In general, this command will produce one plot at a time, and hitting Enter will generate the next plot. However, it is often convenient to view all four plots together. We can achieve this by using the par() and mfrow() functions, which tell R to split the display screen into separate panels so that multiple plots can be viewed simultaneously. For example, par(mfrow = c(2, 2)) divides the plotting region into a \\(2 \\times 2\\) grid of panels.\n\npar(mfrow = c(2, 2))\nplot(lm.fit)\n\n\n\n\nAlternatively, we can compute the residuals from a linear regression fit using the residuals() function. The function rstudent() will return the studentized residuals, and we can use this function to plot the residuals against the fitted values.\n\nplot(predict(lm.fit), residuals(lm.fit))\n\n\n\nplot(predict(lm.fit), rstudent(lm.fit))\n\n\n\n\nOn the basis of the residual plots, there is some evidence of non-linearity. Leverage statistics can be computed for any number of predictors using the hatvalues() function.\n\nplot(hatvalues(lm.fit))\n\n\n\nwhich.max(hatvalues(lm.fit))\n\n375 \n375 \n\n\nThe which.max() function identifies the index of the largest element of a vector. In this case, it tells us which observation has the largest leverage statistic."
  },
  {
    "objectID": "isl3.html#multiple-linear-regression",
    "href": "isl3.html#multiple-linear-regression",
    "title": "5  Linear Regression",
    "section": "5.3 Multiple Linear Regression",
    "text": "5.3 Multiple Linear Regression\nIn order to fit a multiple linear regression model using least squares, we again use the lm() function. The syntax lm(y ~ x1 + x2 + x3) is used to fit a model with three predictors, x1, x2, and x3. The summary() function now outputs the regression coefficients for all the predictors.\n\nlm.fit &lt;- lm(medv ~ lstat + age, data = Boston)\nsummary(lm.fit)\n\n\nCall:\nlm(formula = medv ~ lstat + age, data = Boston)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-15.981  -3.978  -1.283   1.968  23.158 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 33.22276    0.73085  45.458  &lt; 2e-16 ***\nlstat       -1.03207    0.04819 -21.416  &lt; 2e-16 ***\nage          0.03454    0.01223   2.826  0.00491 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.173 on 503 degrees of freedom\nMultiple R-squared:  0.5513,    Adjusted R-squared:  0.5495 \nF-statistic:   309 on 2 and 503 DF,  p-value: &lt; 2.2e-16\n\n\nThe Boston data set contains 12 variables, and so it would be cumbersome to have to type all of these in order to perform a regression using all of the predictors. Instead, we can use the following short-hand:\n\nlm.fit &lt;- lm(medv ~ ., data = Boston)\nsummary(lm.fit)\n\n\nCall:\nlm(formula = medv ~ ., data = Boston)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-15.1304  -2.7673  -0.5814   1.9414  26.2526 \n\nCoefficients:\n              Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  41.617270   4.936039   8.431 3.79e-16 ***\ncrim         -0.121389   0.033000  -3.678 0.000261 ***\nzn            0.046963   0.013879   3.384 0.000772 ***\nindus         0.013468   0.062145   0.217 0.828520    \nchas          2.839993   0.870007   3.264 0.001173 ** \nnox         -18.758022   3.851355  -4.870 1.50e-06 ***\nrm            3.658119   0.420246   8.705  &lt; 2e-16 ***\nage           0.003611   0.013329   0.271 0.786595    \ndis          -1.490754   0.201623  -7.394 6.17e-13 ***\nrad           0.289405   0.066908   4.325 1.84e-05 ***\ntax          -0.012682   0.003801  -3.337 0.000912 ***\nptratio      -0.937533   0.132206  -7.091 4.63e-12 ***\nlstat        -0.552019   0.050659 -10.897  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.798 on 493 degrees of freedom\nMultiple R-squared:  0.7343,    Adjusted R-squared:  0.7278 \nF-statistic: 113.5 on 12 and 493 DF,  p-value: &lt; 2.2e-16\n\n\nWe can access the individual components of a summary object by name (type ?summary.lm to see what is available). Hence summary(lm.fit)$r.sq gives us the \\(R^2\\), and summary(lm.fit)$sigma gives us the RSE. The vif() function, part of the car package, can be used to compute variance inflation factors. Most VIF’s are low to moderate for this data. The car package is not part of the base R installation so it must be downloaded the first time you use it via the install.packages() function in R.\n\nlibrary(car)\n\nLoading required package: carData\n\nvif(lm.fit)\n\n    crim       zn    indus     chas      nox       rm      age      dis \n1.767486 2.298459 3.987181 1.071168 4.369093 1.912532 3.088232 3.954037 \n     rad      tax  ptratio    lstat \n7.445301 9.002158 1.797060 2.870777 \n\n\nWhat if we would like to perform a regression using all of the variables but one? For example, in the above regression output, age has a high \\(p\\)-value. So we may wish to run a regression excluding this predictor. The following syntax results in a regression using all predictors except age.\n\nlm.fit1 &lt;- lm(medv ~ . - age, data = Boston)\nsummary(lm.fit1)\n\n\nCall:\nlm(formula = medv ~ . - age, data = Boston)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-15.1851  -2.7330  -0.6116   1.8555  26.3838 \n\nCoefficients:\n              Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  41.525128   4.919684   8.441 3.52e-16 ***\ncrim         -0.121426   0.032969  -3.683 0.000256 ***\nzn            0.046512   0.013766   3.379 0.000785 ***\nindus         0.013451   0.062086   0.217 0.828577    \nchas          2.852773   0.867912   3.287 0.001085 ** \nnox         -18.485070   3.713714  -4.978 8.91e-07 ***\nrm            3.681070   0.411230   8.951  &lt; 2e-16 ***\ndis          -1.506777   0.192570  -7.825 3.12e-14 ***\nrad           0.287940   0.066627   4.322 1.87e-05 ***\ntax          -0.012653   0.003796  -3.333 0.000923 ***\nptratio      -0.934649   0.131653  -7.099 4.39e-12 ***\nlstat        -0.547409   0.047669 -11.483  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.794 on 494 degrees of freedom\nMultiple R-squared:  0.7343,    Adjusted R-squared:  0.7284 \nF-statistic: 124.1 on 11 and 494 DF,  p-value: &lt; 2.2e-16\n\n\nAlternatively, the update() function can be used.\n\nlm.fit1 &lt;- update(lm.fit, ~ . - age)"
  },
  {
    "objectID": "isl3.html#interaction-terms",
    "href": "isl3.html#interaction-terms",
    "title": "5  Linear Regression",
    "section": "5.4 Interaction Terms",
    "text": "5.4 Interaction Terms\nIt is easy to include interaction terms in a linear model using the lm() function. The syntax lstat:age tells R to include an interaction term between lstat and age. The syntax lstat * age simultaneously includes lstat, age, and the interaction term lstat\\(\\times\\)age as predictors; it is a shorthand for lstat + age + lstat:age. %We can also pass in transformed versions of the predictors.\n\nsummary(lm(medv ~ lstat * age, data = Boston))\n\n\nCall:\nlm(formula = medv ~ lstat * age, data = Boston)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-15.806  -4.045  -1.333   2.085  27.552 \n\nCoefficients:\n              Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 36.0885359  1.4698355  24.553  &lt; 2e-16 ***\nlstat       -1.3921168  0.1674555  -8.313 8.78e-16 ***\nage         -0.0007209  0.0198792  -0.036   0.9711    \nlstat:age    0.0041560  0.0018518   2.244   0.0252 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.149 on 502 degrees of freedom\nMultiple R-squared:  0.5557,    Adjusted R-squared:  0.5531 \nF-statistic: 209.3 on 3 and 502 DF,  p-value: &lt; 2.2e-16"
  },
  {
    "objectID": "isl3.html#non-linear-transformations-of-the-predictors",
    "href": "isl3.html#non-linear-transformations-of-the-predictors",
    "title": "5  Linear Regression",
    "section": "5.5 Non-linear Transformations of the Predictors",
    "text": "5.5 Non-linear Transformations of the Predictors\nThe lm() function can also accommodate non-linear transformations of the predictors. For instance, given a predictor \\(X\\), we can create a predictor \\(X^2\\) using I(X^2). The function I() is needed since the ^ has a special meaning in a formula object; wrapping as we do allows the standard usage in R, which is to raise X to the power 2. We now perform a regression of medv onto lstat and lstat^2.\n\nlm.fit2 &lt;- lm(medv ~ lstat + I(lstat^2))\nsummary(lm.fit2)\n\n\nCall:\nlm(formula = medv ~ lstat + I(lstat^2))\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-15.2834  -3.8313  -0.5295   2.3095  25.4148 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 42.862007   0.872084   49.15   &lt;2e-16 ***\nlstat       -2.332821   0.123803  -18.84   &lt;2e-16 ***\nI(lstat^2)   0.043547   0.003745   11.63   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 5.524 on 503 degrees of freedom\nMultiple R-squared:  0.6407,    Adjusted R-squared:  0.6393 \nF-statistic: 448.5 on 2 and 503 DF,  p-value: &lt; 2.2e-16\n\n\nThe near-zero \\(p\\)-value associated with the quadratic term suggests that it leads to an improved model. We use the anova() function to further quantify the extent to which the quadratic fit is superior to the linear fit.\n\nlm.fit &lt;- lm(medv ~ lstat)\nanova(lm.fit, lm.fit2)\n\nAnalysis of Variance Table\n\nModel 1: medv ~ lstat\nModel 2: medv ~ lstat + I(lstat^2)\n  Res.Df   RSS Df Sum of Sq     F    Pr(&gt;F)    \n1    504 19472                                 \n2    503 15347  1    4125.1 135.2 &lt; 2.2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nHere Model 1 represents the linear submodel containing only one predictor, lstat, while Model 2 corresponds to the larger quadratic model that has two predictors, lstat and lstat^2. The anova() function performs a hypothesis test comparing the two models. The null hypothesis is that the two models fit the data equally well, and the alternative hypothesis is that the full model is superior. Here the \\(F\\)-statistic is \\(135\\) and the associated \\(p\\)-value is virtually zero. This provides very clear evidence that the model containing the predictors lstat and lstat^2 is far superior to the model that only contains the predictor lstat. This is not surprising, since earlier we saw evidence for non-linearity in the relationship between medv and lstat. If we type\n\npar(mfrow = c(2, 2))\nplot(lm.fit2)\n\n\n\n\nthen we see that when the lstat^2 term is included in the model, there is little discernible pattern in the residuals.\nIn order to create a cubic fit, we can include a predictor of the form I(X^3). However, this approach can start to get cumbersome for higher-order polynomials. A better approach involves using the poly() function to create the polynomial within lm(). For example, the following command produces a fifth-order polynomial fit:\n\nlm.fit5 &lt;- lm(medv ~ poly(lstat, 5))\nsummary(lm.fit5)\n\n\nCall:\nlm(formula = medv ~ poly(lstat, 5))\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-13.5433  -3.1039  -0.7052   2.0844  27.1153 \n\nCoefficients:\n                 Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)       22.5328     0.2318  97.197  &lt; 2e-16 ***\npoly(lstat, 5)1 -152.4595     5.2148 -29.236  &lt; 2e-16 ***\npoly(lstat, 5)2   64.2272     5.2148  12.316  &lt; 2e-16 ***\npoly(lstat, 5)3  -27.0511     5.2148  -5.187 3.10e-07 ***\npoly(lstat, 5)4   25.4517     5.2148   4.881 1.42e-06 ***\npoly(lstat, 5)5  -19.2524     5.2148  -3.692 0.000247 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 5.215 on 500 degrees of freedom\nMultiple R-squared:  0.6817,    Adjusted R-squared:  0.6785 \nF-statistic: 214.2 on 5 and 500 DF,  p-value: &lt; 2.2e-16\n\n\nThis suggests that including additional polynomial terms, up to fifth order, leads to an improvement in the model fit! However, further investigation of the data reveals that no polynomial terms beyond fifth order have significant \\(p\\)-values in a regression fit.\nBy default, the poly() function orthogonalizes the predictors: this means that the features output by this function are not simply a sequence of powers of the argument. However, a linear model applied to the output of the poly() function will have the same fitted values as a linear model applied to the raw polynomials (although the coefficient estimates, standard errors, and p-values will differ). In order to obtain the raw polynomials from the poly() function, the argument raw = TRUE must be used.\nOf course, we are in no way restricted to using polynomial transformations of the predictors. Here we try a log transformation.\n\nsummary(lm(medv ~ log(rm), data = Boston))\n\n\nCall:\nlm(formula = medv ~ log(rm), data = Boston)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-19.487  -2.875  -0.104   2.837  39.816 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  -76.488      5.028  -15.21   &lt;2e-16 ***\nlog(rm)       54.055      2.739   19.73   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.915 on 504 degrees of freedom\nMultiple R-squared:  0.4358,    Adjusted R-squared:  0.4347 \nF-statistic: 389.3 on 1 and 504 DF,  p-value: &lt; 2.2e-16"
  },
  {
    "objectID": "isl3.html#qualitative-predictors",
    "href": "isl3.html#qualitative-predictors",
    "title": "5  Linear Regression",
    "section": "5.6 Qualitative Predictors",
    "text": "5.6 Qualitative Predictors\nWe will now examine the Carseats data, which is part of the ISLR2 library. We will attempt to predict Sales (child car seat sales) in \\(400\\) locations based on a number of predictors.\n\nhead(Carseats)\n\n  Sales CompPrice Income Advertising Population Price ShelveLoc Age Education\n1  9.50       138     73          11        276   120       Bad  42        17\n2 11.22       111     48          16        260    83      Good  65        10\n3 10.06       113     35          10        269    80    Medium  59        12\n4  7.40       117    100           4        466    97    Medium  55        14\n5  4.15       141     64           3        340   128       Bad  38        13\n6 10.81       124    113          13        501    72       Bad  78        16\n  Urban  US\n1   Yes Yes\n2   Yes Yes\n3   Yes Yes\n4   Yes Yes\n5   Yes  No\n6    No Yes\n\n\nThe Carseats data includes qualitative predictors such as shelveloc, an indicator of the quality of the shelving location—that is, the space within a store in which the car seat is displayed—at each location. The predictor shelveloc takes on three possible values: Bad, Medium, and Good. Given a qualitative variable such as shelveloc, R generates dummy variables automatically. Below we fit a multiple regression model that includes some interaction terms.\n\nlm.fit &lt;- lm(Sales ~ . + Income:Advertising + Price:Age, \n    data = Carseats)\nsummary(lm.fit)\n\n\nCall:\nlm(formula = Sales ~ . + Income:Advertising + Price:Age, data = Carseats)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-2.9208 -0.7503  0.0177  0.6754  3.3413 \n\nCoefficients:\n                     Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)         6.5755654  1.0087470   6.519 2.22e-10 ***\nCompPrice           0.0929371  0.0041183  22.567  &lt; 2e-16 ***\nIncome              0.0108940  0.0026044   4.183 3.57e-05 ***\nAdvertising         0.0702462  0.0226091   3.107 0.002030 ** \nPopulation          0.0001592  0.0003679   0.433 0.665330    \nPrice              -0.1008064  0.0074399 -13.549  &lt; 2e-16 ***\nShelveLocGood       4.8486762  0.1528378  31.724  &lt; 2e-16 ***\nShelveLocMedium     1.9532620  0.1257682  15.531  &lt; 2e-16 ***\nAge                -0.0579466  0.0159506  -3.633 0.000318 ***\nEducation          -0.0208525  0.0196131  -1.063 0.288361    \nUrbanYes            0.1401597  0.1124019   1.247 0.213171    \nUSYes              -0.1575571  0.1489234  -1.058 0.290729    \nIncome:Advertising  0.0007510  0.0002784   2.698 0.007290 ** \nPrice:Age           0.0001068  0.0001333   0.801 0.423812    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.011 on 386 degrees of freedom\nMultiple R-squared:  0.8761,    Adjusted R-squared:  0.8719 \nF-statistic:   210 on 13 and 386 DF,  p-value: &lt; 2.2e-16\n\n\nThe contrasts() function returns the coding that R uses for the dummy variables.\n\nattach(Carseats)\ncontrasts(ShelveLoc)\n\n       Good Medium\nBad       0      0\nGood      1      0\nMedium    0      1\n\n\nUse ?contrasts to learn about other contrasts, and how to set them.\nR has created a ShelveLocGood dummy variable that takes on a value of 1 if the shelving location is good, and 0 otherwise. It has also created a ShelveLocMedium dummy variable that equals 1 if the shelving location is medium, and 0 otherwise. A bad shelving location corresponds to a zero for each of the two dummy variables. The fact that the coefficient for ShelveLocGood in the regression output is positive indicates that a good shelving location is associated with high sales (relative to a bad location). And ShelveLocMedium has a smaller positive coefficient, indicating that a medium shelving location is associated with higher sales than a bad shelving location but lower sales than a good shelving location."
  },
  {
    "objectID": "isl3.html#writing-functions",
    "href": "isl3.html#writing-functions",
    "title": "5  Linear Regression",
    "section": "5.7 Writing Functions",
    "text": "5.7 Writing Functions\nAs we have seen, R comes with many useful functions, and still more functions are available by way of R libraries. However, we will often be interested in performing an operation for which no function is available. In this setting, we may want to write our own function. For instance, below we provide a simple function that reads in the ISLR2 and MASS libraries, called LoadLibraries(). Before we have created the function, R returns an error if we try to call it.\n\nLoadLibraries\n\nError in eval(expr, envir, enclos): object 'LoadLibraries' not found\n\nLoadLibraries()\n\nError in LoadLibraries(): could not find function \"LoadLibraries\"\n\n\nWe now create the function. Note that the + symbols are printed by R and should not be typed in. The { symbol informs R that multiple commands are about to be input. Hitting Enter after typing { will cause R to print the + symbol. We can then input as many commands as we wish, hitting {Enter} after each one. Finally the } symbol informs R that no further commands will be entered.\n\nLoadLibraries &lt;- function() {\n library(ISLR2)\n library(MASS)\n print(\"The libraries have been loaded.\")\n}\n\nNow if we type in LoadLibraries, R will tell us what is in the function.\n\nLoadLibraries\n\nfunction() {\n library(ISLR2)\n library(MASS)\n print(\"The libraries have been loaded.\")\n}\n\n\nIf we call the function, the libraries are loaded in and the print statement is output.\n\nLoadLibraries()\n\n[1] \"The libraries have been loaded.\""
>>>>>>> de6819315c8d8ce26b5517135ade0c6dfac961cb
  }
]